module SpookAndPay
  # Class used to encapsulate the details of an error related to some 
  # interaction with the provider. It is generic in that it might apply to
  # a specific part of the payload or it might capture more general details.
  #
  # It will also attempt translate errors into a human readable string. Where 
  # it cannot, it still exposes the raw results from the provider allowing 
  # debugging.
  class SubmissionError
    # A constant which defines the acceptable types of errors and which is
    # also used to generate specific messages. Where the error is unknown,
    # the consumer of this library will be directed to use the raw error 
    # generated by the underlying libraries.
    ERROR_MESSAGES = {
      :credit_card => {
        :number_required          => "number is required",
        :number_invalid           => "number is invalid",
        :number_too_short         => "number must be between 12 and 19 digits",
        :name_required            => "name is required",
        :type_not_accepted        => "card type is not accepted by this merchant",
        :expiration_month_invalid => "expiration month is invalid",
        :expiration_month_expired => "expiration month has expired",
        :expiration_year_invalid  => "expiration year is invalid",
        :expiration_year_expired  => "expiration year has expired",
        :cvv_invalid              => "CVV must be three digits",
        :cvv_required             => "CVV is required"
      },
      :transaction => {
        :cannot_capture => "must be authorized in order to capture funds",
        :cannot_refund  => "must be settled in order to refund",
        :cannot_void    => "must be authorized or settled in order to void"
      },
      :unknown => {
        :unknown => "please refer to the #raw attribute of this error"
      }
    }.freeze

    # Basic attributes
    attr_reader :error_type, :message, :target, :raw, :field

    # Generates a new error. Based on the target and error type, it can
    # generate the appropriate error messages or otherwise fall back.
    #
    # @param Symbol target
    # @param Symbol error_type
    # @param [Symbol, nil] field
    # @param Class raw
    def initialize(target, error_type, field, raw)
      @error_type = error_type
      @target = target
      @field = field
      @raw = raw
    end

    # Indicates if this is an error that we don't know anything about.
    #
    # @return [true, false]
    def unknown?
      @error_type == :unknown
    end

    # Generates a human readable error message based on the target and
    # error type.
    #
    # @return String
    def message
      ERROR_MESSAGES[target][error_type] || ERROR_MESSAGES[target][:"#{field}_#{error_type}"]
    end
  end
end
