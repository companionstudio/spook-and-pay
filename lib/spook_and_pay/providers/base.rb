module SpookAndPay
  module Providers
    class Base
      # A hash which maps between the fields for a credit card and the actual
      # form field names required by the provider.
      #
      # It should be over-ridden per provider.
      FORM_FIELD_NAMES = {}.freeze

      # An error used when validating the contents of an options hash. Since
      # many of the methods on the provider classes take additional arguments 
      # as a Hash, it's important to make sure we give good errors when they 
      # are missing.
      class InvalidOptionsError < StandardError
        def initialize(errors)
          @errors = errors
        end

        def to_s
          "You have missed, or provided invalid options"
        end
      end

      # An error for indicating actions that are not supported by a particular
      # provider. In general, it will be the Base subclasses that define thier
      # own versions of the the method that throw this error.
      class NotSupportedError < StandardError
        def to_s
          "This action is not supported by this provider."
        end
      end

      class SubmissionError
        # A constant which defines the acceptable types of errors and which is
        # also used to generate specific messages. Where the error is unknown,
        # the consumer of this library will be directed to use the raw error 
        # generated by the underlying libraries.
        ERROR_MESSAGES = {
          :credit_card => {
            :invalid_number           => "number is invalid",
            :type_not_accepted        => "card type is not accepted by this merchant",
            :wrong_length             => "number must be between 12 and 19 digits",
            :invalid_expiration_month => "expiration month is invalid",
            :invalid_expiration_year  => "expiration year is invalid",
            :invalid_cvv              => "CVV must be three digits"
          },
          :unknown => {
            :unknown => "please refer to the #raw attribute of this error"
          }
        }.freeze

        # Basic attributes
        attr_reader :error_type, :message, :target, :raw, :field

        # Generates a new error. Based on the target and error type, it can
        # generate the appropriate error messages or otherwise fall back.
        #
        # @param Symbol error_type
        # @param Symbol target
        # @param [Symbol, nil] field
        # @param Class raw
        def initialize(target, error_type, field, raw)
          @error_type = error_type
          @target = target
          @field = field
          @raw = raw
        end

        # Indicates if this is an error that we don't know anything about.
        #
        # @return [true, false]
        def unknown?
          @error_type == :unknown
        end

        # Generates a human readable error message based on the target and
        # error type.
        #
        # @return String
        def message
          ERROR_MESSAGES[target][error_type]
        end
      end

      # Basic attributes
      attr_reader :environment, :config

      # @param [:production, :development, :test] env
      # @param Hash config
      #
      # @return nil
      def initialize(env, config)
        @environment = env
        @config = config

        nil
      end

      # Retrieves the payment method details from the provider's vault.
      #
      # @param String id
      #
      # @return [SpookAndPay::CreditCard, nil]
      def credit_card(id)
        raise NotImplementedError
      end

      # Retrieves a credit card from the provider based on the transaction
      # or transaction id provided. Some providers may not support this action.
      #
      # @param [String, SpookAndPay::Transaction] transaction_or_id
      # @return [SpookAndPay::CreditCard, nil]
      def credit_card_from_transaction(transaction_or_id)
        raise NotSupportedError
      end

      # Retrieves the transaction details from the provider's vault.
      #
      # @param String id
      #
      # @return [SpookAndPay::Transaction, nil]
      def transaction(id)
        raise NotImplementedError
      end

      # Returns a hash containing the details necessary for making a 
      # submission. If you know what you're doing, you can use this directly, 
      # but otherwise you should be using the form helpers.
      #
      # The details generated by this method are for submitting card details to
      # the provider for storage. Billing etc has to be handled via a separate
      # step after submission.
      #
      # This method is implemented by calling on provider specific methods.
      #
      # @param [:purchase, :authorize] type
      # @param Hash opts
      # @option opts String :vault
      # @option opts String :redirect_url
      #
      # @return Hash
      def prepare_payment_submission(type, opts = {})
        {
          :url            => payment_submission_url,
          :hidden_fields  => payment_hidden_fields(type, opts),
          :field_names    => self.class::FORM_FIELD_NAMES
        }
      end

      # Confirms the submission of payment details to the provider.
      #
      # @param Hash params
      #
      # @return SpookAndPay::Result
      def confirm_payment_submission(params)
        raise NotImplementedError
      end

      # Voids an authorization. 
      #
      # @param SpookAndPay::Transaction
      # 
      # @return SpookAndPay::Result
      def void_transaction(transaction)
        raise NotImplementedError
      end

      # Authorizes a payment.
      #
      # @param SpookAndPay::CreditCard card
      # @param [String, Numeric] amount
      # 
      # @return SpookAndPay::Result
      def authorize(card, amount)
        raise NotImplementedError
      end

      # Bills a payment method.
      #
      # @param SpookAndPay::CreditCard card
      # @param [String, Numeric] amount
      # 
      # @return SpookAndPay::Transaction
      def purchase(card, amount)
        raise NotImplementedError
      end

      # Captures funds that have been pre-authorized.
      #
      # @param String transaction_id
      # @param Hash opts
      # 
      # @return SpookAndPay::Transaction
      def capture_transaction(payment_method, transaction_id, opts)
        raise NotImplementedError
      end

      # Credits a payment method with the specified amount.
      #
      # @param SpookAndPay::CreditCard payment_method
      # @param [String, Numeric] amount
      # @param Hash opts
      #
      # @return SpookAndPay::Transaction
      def refund_transaction(payment_method, amount, opts = {})
        raise NotImplementedError
      end

      # Removes payment details from the provider's vault.
      #
      # @param SpookAndPay::CreditCard payment_method
      # @param Hash opts
      # 
      # @return SpookAndPay::Transaction
      def delete_credit_card(payment_method, opts = {})
        raise NotImplementedError
      end

      private

      # Returns the URL any forms must submit to. Depending on the provider,
      # this might change to a different URL per environment.
      #
      # @return String
      #
      # @abstract Subclass to implement
      # @api private
      def payment_submission_url
        raise NotImplementedError
      end

      # Returns a Hash of fields that should be injected into a form when 
      # submitting card details.
      #
      # @param [:purchase, :authorize] type
      # @param Hash opts
      #
      # @return Hash
      #
      # @abstract Subclass to implement
      # @api private
      def payment_hidden_fields(type, opts = {})
        raise NotImplementedError
      end
    end
  end
end
